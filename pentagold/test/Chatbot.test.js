const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Chatbot Integration Tests", function () {
  let owner, user1, user2;
  let pgaux, dcaAutomation;

  beforeEach(async function () {
    [owner, user1, user2] = await ethers.getSigners();

    // Deploy PGAUx contract
    const PGAUx = await ethers.getContractFactory("PGAUx");
    pgaux = await PGAUx.deploy();
    await pgaux.deployed();

    // Deploy DCA Automation contract
    const DCAAutomation = await ethers.getContractFactory("DCAAutomation");
    dcaAutomation = await DCAAutomation.deploy(pgaux.address);
    await dcaAutomation.deployed();

    // Grant DCA_EXECUTOR_ROLE to owner
    const DCA_EXECUTOR_ROLE = await dcaAutomation.DCA_EXECUTOR_ROLE();
    await dcaAutomation.grantRole(DCA_EXECUTOR_ROLE, owner.address);
  });

  describe("Chatbot Knowledge Base", function () {
    it("Should have DCA knowledge base", function () {
      const dcaKeywords = ['dca', 'dollar cost averaging', 't·ª± ƒë·ªông', 'k·∫ø ho·∫°ch', 'ƒë·∫ßu t∆∞ ƒë·ªãnh k·ª≥'];
      const dcaResponses = [
        'dca l√† g√¨',
        't·∫°o k·∫ø ho·∫°ch dca',
        'dca automation'
      ];

      // Verify DCA knowledge exists
      expect(dcaKeywords).to.include('dca');
      expect(dcaResponses).to.include('dca l√† g√¨');
    });

    it("Should have trading knowledge base", function () {
      const tradingKeywords = ['trading', 'giao d·ªãch', 'mua', 'b√°n', 'mint', 'redeem'];
      const tradingResponses = [
        'trading panel',
        'giao d·ªãch'
      ];

      // Verify trading knowledge exists
      expect(tradingKeywords).to.include('trading');
      expect(tradingResponses).to.include('trading panel');
    });

    it("Should have security knowledge base", function () {
      const securityKeywords = ['b·∫£o m·∫≠t', 'an to√†n', 'audit', 'hack', 'r·ªßi ro'];
      const securityResponses = [
        'b·∫£o m·∫≠t',
        'an to√†n'
      ];

      // Verify security knowledge exists
      expect(securityKeywords).to.include('b·∫£o m·∫≠t');
      expect(securityResponses).to.include('b·∫£o m·∫≠t');
    });

    it("Should have fees knowledge base", function () {
      const feesKeywords = ['ph√≠', 'fee', 'chi ph√≠', 'cost', 'gi√°'];
      const feesResponses = [
        'ph√≠ giao d·ªãch',
        'chi ph√≠'
      ];

      // Verify fees knowledge exists
      expect(feesKeywords).to.include('ph√≠');
      expect(feesResponses).to.include('ph√≠ giao d·ªãch');
    });
  });

  describe("Quick Questions", function () {
    it("Should have 6 quick questions", function () {
      const quickQuestions = [
        {
          id: '1',
          question: 'DCA l√† g√¨ v√† t·∫°i sao n√™n s·ª≠ d·ª•ng?',
          category: 'dca',
          icon: 'üìà'
        },
        {
          id: '2',
          question: 'L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch DCA?',
          category: 'dca',
          icon: '‚öôÔ∏è'
        },
        {
          id: '3',
          question: 'Ph√≠ giao d·ªãch v√† DCA l√† bao nhi√™u?',
          category: 'fees',
          icon: 'üí∞'
        },
        {
          id: '4',
          question: 'D·ª± √°n c√≥ an to√†n kh√¥ng?',
          category: 'security',
          icon: 'üõ°Ô∏è'
        },
        {
          id: '5',
          question: 'C√°ch s·ª≠ d·ª•ng trading panel?',
          category: 'trading',
          icon: 'üìä'
        },
        {
          id: '6',
          question: 'T√†i li·ªáu v√† h∆∞·ªõng d·∫´n ·ªü ƒë√¢u?',
          category: 'docs',
          icon: 'üìö'
        }
      ];

      expect(quickQuestions).to.have.length(6);
      expect(quickQuestions[0].category).to.equal('dca');
      expect(quickQuestions[2].category).to.equal('fees');
      expect(quickQuestions[3].category).to.equal('security');
    });

    it("Should have proper question categories", function () {
      const categories = ['dca', 'fees', 'security', 'trading', 'docs'];
      const quickQuestions = [
        { category: 'dca' },
        { category: 'dca' },
        { category: 'fees' },
        { category: 'security' },
        { category: 'trading' },
        { category: 'docs' }
      ];

      quickQuestions.forEach(q => {
        expect(categories).to.include(q.category);
      });
    });
  });

  describe("Message Processing", function () {
    it("Should process DCA questions correctly", function () {
      const dcaQuestions = [
        "DCA l√† g√¨?",
        "dca automation",
        "t·∫°o k·∫ø ho·∫°ch dca",
        "dollar cost averaging"
      ];

      dcaQuestions.forEach(question => {
        const lowerQuestion = question.toLowerCase();
        expect(lowerQuestion.includes('dca') || lowerQuestion.includes('dollar cost averaging')).to.be.true;
      });
    });

    it("Should process trading questions correctly", function () {
      const tradingQuestions = [
        "C√°ch s·ª≠ d·ª•ng trading panel?",
        "giao d·ªãch PGAUx",
        "mint tokens",
        "redeem PGAUx"
      ];

      tradingQuestions.forEach(question => {
        const lowerQuestion = question.toLowerCase();
        expect(
          lowerQuestion.includes('trading') || 
          lowerQuestion.includes('giao d·ªãch') || 
          lowerQuestion.includes('mint') || 
          lowerQuestion.includes('redeem')
        ).to.be.true;
      });
    });

    it("Should process security questions correctly", function () {
      const securityQuestions = [
        "D·ª± √°n c√≥ an to√†n kh√¥ng?",
        "b·∫£o m·∫≠t smart contract",
        "audit report",
        "r·ªßi ro ƒë·∫ßu t∆∞"
      ];

      securityQuestions.forEach(question => {
        const lowerQuestion = question.toLowerCase();
        expect(
          lowerQuestion.includes('an to√†n') || 
          lowerQuestion.includes('b·∫£o m·∫≠t') || 
          lowerQuestion.includes('audit') || 
          lowerQuestion.includes('r·ªßi ro')
        ).to.be.true;
      });
    });
  });

  describe("Response Quality", function () {
    it("Should provide high confidence responses for exact matches", function () {
      const exactMatches = [
        { question: "dca l√† g√¨", expectedConfidence: 0.95 },
        { question: "t·∫°o k·∫ø ho·∫°ch dca", expectedConfidence: 0.90 },
        { question: "trading panel", expectedConfidence: 0.88 },
        { question: "b·∫£o m·∫≠t", expectedConfidence: 0.92 },
        { question: "ph√≠ giao d·ªãch", expectedConfidence: 0.85 }
      ];

      exactMatches.forEach(match => {
        expect(match.expectedConfidence).to.be.greaterThan(0.8);
      });
    });

    it("Should provide suggested actions for responses", function () {
      const responsesWithActions = [
        {
          question: "dca l√† g√¨",
          expectedActions: ['T·∫°o k·∫ø ho·∫°ch DCA', 'Xem h∆∞·ªõng d·∫´n DCA', 'T√≠nh to√°n ph√≠ DCA']
        },
        {
          question: "t·∫°o k·∫ø ho·∫°ch dca",
          expectedActions: ['M·ªü DCA Panel', 'Xem video h∆∞·ªõng d·∫´n', 'Li√™n h·ªá support']
        },
        {
          question: "trading panel",
          expectedActions: ['M·ªü Trading Panel', 'Xem bi·ªÉu ƒë·ªì gi√°', 'Ki·ªÉm tra balance']
        }
      ];

      responsesWithActions.forEach(response => {
        expect(response.expectedActions).to.have.length.greaterThan(0);
      });
    });
  });

  describe("Error Handling", function () {
    it("Should handle empty messages", function () {
      const emptyMessages = ["", "   ", "\n", "\t"];
      
      emptyMessages.forEach(message => {
        expect(message.trim()).to.equal("");
      });
    });

    it("Should handle unknown questions gracefully", function () {
      const unknownQuestions = [
        "xyz123",
        "random text",
        "completely unrelated question"
      ];

      // These should return default responses with lower confidence
      unknownQuestions.forEach(question => {
        const hasDefaultKeywords = question.toLowerCase().includes('xyz') || 
                                  question.toLowerCase().includes('random') ||
                                  question.toLowerCase().includes('unrelated');
        expect(hasDefaultKeywords).to.be.true;
      });
    });
  });

  describe("Integration with Smart Contracts", function () {
    it("Should provide accurate DCA information", async function () {
      // Check DCA contract address
      expect(dcaAutomation.address).to.not.equal(ethers.constants.AddressZero);
      
      // Check PGAUx contract address
      expect(pgaux.address).to.not.equal(ethers.constants.AddressZero);
      
      // Verify DCA contract is connected to PGAUx
      const pgauxAddress = await dcaAutomation.pgauxToken();
      expect(pgauxAddress).to.equal(pgaux.address);
    });

    it("Should provide accurate fee information", async function () {
      // DCA execution fee should be 0.1%
      const executionFee = await dcaAutomation.EXECUTION_FEE();
      expect(executionFee).to.equal(100); // 0.1% = 100 basis points
      
      // Convert to percentage
      const feePercentage = executionFee / 10000; // 10000 basis points = 100%
      expect(feePercentage).to.equal(0.001); // 0.1%
    });

    it("Should provide accurate limits information", async function () {
      // Check minimum amount
      const minAmount = await dcaAutomation.MIN_AMOUNT();
      expect(minAmount).to.be.greaterThan(0);
      
      // Check maximum amount
      const maxAmount = await dcaAutomation.MAX_AMOUNT();
      expect(maxAmount).to.be.greaterThan(minAmount);
    });
  });

  describe("User Experience", function () {
    it("Should provide helpful initial greeting", function () {
      const greeting = "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa PentaGold. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ d·ª± √°n, DCA automation, trading v√† nhi·ªÅu th·ª© kh√°c. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?";
      
      expect(greeting).to.include("PentaGold");
      expect(greeting).to.include("DCA automation");
      expect(greeting).to.include("trading");
      expect(greeting).to.include("c√¢u h·ªèi");
    });

    it("Should provide clear instructions", function () {
      const instructions = [
        "Nh·∫•n Enter ƒë·ªÉ g·ª≠i",
        "Shift + Enter ƒë·ªÉ xu·ªëng d√≤ng",
        "Ch·ªçn c√¢u h·ªèi t·ª´ danh s√°ch"
      ];

      instructions.forEach(instruction => {
        expect(instruction).to.not.be.empty;
        expect(instruction.length).to.be.greaterThan(5);
      });
    });

    it("Should have proper Vietnamese language support", function () {
      const vietnameseTexts = [
        "Xin ch√†o",
        "DCA l√† g√¨",
        "Ph√≠ giao d·ªãch",
        "B·∫£o m·∫≠t",
        "H∆∞·ªõng d·∫´n"
      ];

      vietnameseTexts.forEach(text => {
        expect(text).to.match(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/);
      });
    });
  });

  describe("Performance and Scalability", function () {
    it("Should handle multiple concurrent users", function () {
      const concurrentUsers = 100;
      const messagesPerUser = 10;
      const totalMessages = concurrentUsers * messagesPerUser;
      
      expect(totalMessages).to.equal(1000);
      expect(concurrentUsers).to.be.greaterThan(0);
      expect(messagesPerUser).to.be.greaterThan(0);
    });

    it("Should have reasonable response times", function () {
      const maxResponseTime = 3000; // 3 seconds
      const minResponseTime = 500;  // 0.5 seconds
      
      expect(maxResponseTime).to.be.greaterThan(minResponseTime);
      expect(maxResponseTime).to.be.lessThan(10000); // Less than 10 seconds
    });

    it("Should support message history", function () {
      const maxHistorySize = 100;
      const messageSize = 1024; // 1KB per message
      const maxMemoryUsage = maxHistorySize * messageSize;
      
      expect(maxMemoryUsage).to.be.lessThan(1024 * 1024); // Less than 1MB
    });
  });
}); 