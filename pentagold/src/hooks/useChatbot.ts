import { useState, useCallback } from 'react';

export interface ChatMessage {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  metadata?: {
    category?: string;
    confidence?: number;
    suggestedActions?: string[];
  };
}

export interface ChatbotState {
  messages: ChatMessage[];
  isTyping: boolean;
  error: string | null;
}

export interface ChatbotActions {
  sendMessage: (message: string) => Promise<void>;
  clearChat: () => void;
  getQuickQuestions: () => Array<{
    id: string;
    question: string;
    category: string;
    icon: string;
  }>;
}

// Enhanced knowledge base with more sophisticated responses
const ENHANCED_KNOWLEDGE_BASE = {
  dca: {
    keywords: ['dca', 'dollar cost averaging', 't·ª± ƒë·ªông', 'k·∫ø ho·∫°ch', 'ƒë·∫ßu t∆∞ ƒë·ªãnh k·ª≥'],
    responses: {
      'dca l√† g√¨': {
        content: `DCA (Dollar-Cost Averaging) l√† chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ mua m·ªôt l∆∞·ª£ng ti·ªÅn c·ªë ƒë·ªãnh theo ƒë·ªãnh k·ª≥, b·∫•t k·ªÉ gi√° th·ªã tr∆∞·ªùng.

**L·ª£i √≠ch c·ªßa DCA:**
‚Ä¢ Gi·∫£m r·ªßi ro bi·∫øn ƒë·ªông gi√°
‚Ä¢ Lo·∫°i b·ªè c·∫£m x√∫c khi ƒë·∫ßu t∆∞
‚Ä¢ T·ª± ƒë·ªông h√≥a ho√†n to√†n
‚Ä¢ X√¢y d·ª±ng danh m·ª•c d√†i h·∫°n

**T·∫°i sao n√™n d√πng DCA tr√™n PentaGold:**
‚Ä¢ Ph√≠ th·∫•p ch·ªâ 0.1% m·ªói l·∫ßn
‚Ä¢ T·∫ßn su·∫•t linh ho·∫°t (ng√†y/tu·∫ßn/th√°ng)
‚Ä¢ Giao di·ªán d·ªÖ s·ª≠ d·ª•ng
‚Ä¢ B·∫£o m·∫≠t cao v·ªõi smart contract`,
        confidence: 0.95,
        suggestedActions: ['T·∫°o k·∫ø ho·∫°ch DCA', 'Xem h∆∞·ªõng d·∫´n DCA', 'T√≠nh to√°n ph√≠ DCA']
      },
      't·∫°o k·∫ø ho·∫°ch dca': {
        content: `**C√°ch t·∫°o k·∫ø ho·∫°ch DCA:**

1. **ƒêƒÉng nh·∫≠p** v√†o dashboard
2. **Chuy·ªÉn sang tab** "DCA Automation"
3. **Nh·∫•n "New Plan"**
4. **Nh·∫≠p th√¥ng tin:**
   - S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (t·ª´ $0.01 - $10,000)
   - T·∫ßn su·∫•t: Daily/Weekly/Monthly
5. **Nh·∫•n "Create Plan"**

**Qu·∫£n l√Ω k·∫ø ho·∫°ch:**
‚Ä¢ Pause/Resume: T·∫°m d·ª´ng/kh√¥i ph·ª•c
‚Ä¢ Edit: Thay ƒë·ªïi s·ªë ti·ªÅn/t·∫ßn su·∫•t
‚Ä¢ Cancel: H·ªßy b·ªè ho√†n to√†n

**L∆∞u √Ω:** K·∫ø ho·∫°ch s·∫Ω t·ª± ƒë·ªông th·ª±c thi theo l·ªãch tr√¨nh ƒë√£ ƒë·∫∑t.`,
        confidence: 0.90,
        suggestedActions: ['M·ªü DCA Panel', 'Xem video h∆∞·ªõng d·∫´n', 'Li√™n h·ªá support']
      }
    }
  },
  trading: {
    keywords: ['trading', 'giao d·ªãch', 'mua', 'b√°n', 'mint', 'redeem'],
    responses: {
      'trading panel': {
        content: `**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Trading Panel:**

**Mint PGAUx (Mua):**
1. Ch·ªçn "Mint PGAUx"
2. Nh·∫≠p s·ªë l∆∞·ª£ng tokens mu·ªën mua
3. ƒêi·ªÅu ch·ªânh slippage tolerance
4. Nh·∫•n "Mint" v√† x√°c nh·∫≠n

**Redeem PGAUx (B√°n):**
1. Ch·ªçn "Redeem PGAUx"
2. Nh·∫≠p s·ªë tokens mu·ªën b√°n
3. ƒêi·ªÅu ch·ªânh slippage tolerance
4. Nh·∫•n "Redeem" v√† x√°c nh·∫≠n

**C√†i ƒë·∫∑t:**
‚Ä¢ Slippage tolerance: 0.1% - 5%
‚Ä¢ Gas price optimization
‚Ä¢ Transaction confirmation

**L∆∞u √Ω:**
‚Ä¢ Lu√¥n ki·ªÉm tra slippage
‚Ä¢ ƒê·∫£m b·∫£o ƒë·ªß s·ªë d∆∞
‚Ä¢ Theo d√µi gas fees`,
        confidence: 0.88,
        suggestedActions: ['M·ªü Trading Panel', 'Xem bi·ªÉu ƒë·ªì gi√°', 'Ki·ªÉm tra balance']
      }
    }
  },
  security: {
    keywords: ['b·∫£o m·∫≠t', 'an to√†n', 'audit', 'hack', 'r·ªßi ro'],
    responses: {
      'b·∫£o m·∫≠t': {
        content: `**B·∫£o m·∫≠t PentaGold:**

**Smart Contract Security:**
‚Ä¢ ƒê√£ audit b·ªüi c√°c c√¥ng ty uy t√≠n
‚Ä¢ S·ª≠ d·ª•ng OpenZeppelin libraries
‚Ä¢ Upgradeable contracts v·ªõi timelock
‚Ä¢ Circuit breaker t√≠ch h·ª£p

**Oracle Security:**
‚Ä¢ Multi-oracle system (Chainlink + Band)
‚Ä¢ Price staleness protection
‚Ä¢ Deviation threshold monitoring
‚Ä¢ Emergency pause capability

**User Protection:**
‚Ä¢ Role-based access control
‚Ä¢ Slippage protection
‚Ä¢ Maximum amount limits
‚Ä¢ Emergency stop functions

**Audit Status:**
‚úÖ Smart contract audit completed
‚úÖ Security review passed
‚úÖ Penetration testing done
‚úÖ Bug bounty program active`,
        confidence: 0.92,
        suggestedActions: ['Xem audit report', 'Ki·ªÉm tra smart contract', 'Tham gia bug bounty']
      }
    }
  },
  fees: {
    keywords: ['ph√≠', 'fee', 'chi ph√≠', 'cost', 'gi√°'],
    responses: {
      'ph√≠ giao d·ªãch': {
        content: `**Ph√≠ tr√™n PentaGold:**

**Trading Fees:**
‚Ä¢ Mint PGAUx: 0.5%
‚Ä¢ Redeem PGAUx: 0.5%
‚Ä¢ Slippage: 0.1% - 5% (t√πy ch·ªânh)

**DCA Automation Fees:**
‚Ä¢ Execution fee: 0.1% m·ªói l·∫ßn
‚Ä¢ Kh√¥ng c√≥ ph√≠ qu·∫£n l√Ω
‚Ä¢ Kh√¥ng c√≥ ph√≠ ·∫©n

**V√≠ d·ª• ph√≠ DCA:**
‚Ä¢ ƒê·∫ßu t∆∞ $100/tu·∫ßn
‚Ä¢ Ph√≠ th·ª±c thi: $0.10
‚Ä¢ T·ªïng ph√≠ nƒÉm: $5.20 (52 tu·∫ßn)

**So s√°nh v·ªõi c√°c n·ªÅn t·∫£ng kh√°c:**
PentaGold c√≥ ph√≠ th·∫•p h∆°n nhi·ªÅu so v·ªõi c√°c s√†n giao d·ªãch truy·ªÅn th·ªëng.`,
        confidence: 0.85,
        suggestedActions: ['T√≠nh to√°n ph√≠', 'So s√°nh ph√≠', 'T·ªëi ∆∞u chi ph√≠']
      }
    }
  }
};

// Quick questions for easy access
const QUICK_QUESTIONS = [
  {
    id: '1',
    question: 'DCA l√† g√¨ v√† t·∫°i sao n√™n s·ª≠ d·ª•ng?',
    category: 'dca',
    icon: 'üìà'
  },
  {
    id: '2',
    question: 'L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch DCA?',
    category: 'dca',
    icon: '‚öôÔ∏è'
  },
  {
    id: '3',
    question: 'Ph√≠ giao d·ªãch v√† DCA l√† bao nhi√™u?',
    category: 'fees',
    icon: 'üí∞'
  },
  {
    id: '4',
    question: 'D·ª± √°n c√≥ an to√†n kh√¥ng?',
    category: 'security',
    icon: 'üõ°Ô∏è'
  },
  {
    id: '5',
    question: 'C√°ch s·ª≠ d·ª•ng trading panel?',
    category: 'trading',
    icon: 'üìä'
  },
  {
    id: '6',
    question: 'T√†i li·ªáu v√† h∆∞·ªõng d·∫´n ·ªü ƒë√¢u?',
    category: 'docs',
    icon: 'üìö'
  }
];

export const useChatbot = (): ChatbotState & ChatbotActions => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa PentaGold. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ d·ª± √°n, DCA automation, trading v√† nhi·ªÅu th·ª© kh√°c. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?',
      timestamp: new Date(),
      metadata: {
        category: 'greeting',
        confidence: 1.0,
        suggestedActions: ['H·ªèi v·ªÅ DCA', 'H·ªèi v·ªÅ Trading', 'H·ªèi v·ªÅ B·∫£o m·∫≠t']
      }
    }
  ]);
  const [isTyping, setIsTyping] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Natural language processing function
  const processUserMessage = useCallback((message: string) => {
    const lowerMessage = message.toLowerCase();
    
    // Check for exact matches first
    for (const [category, data] of Object.entries(ENHANCED_KNOWLEDGE_BASE)) {
      for (const [key, response] of Object.entries(data.responses)) {
        if (lowerMessage.includes(key)) {
          return {
            content: response.content,
            category: category,
            confidence: response.confidence,
            suggestedActions: response.suggestedActions
          };
        }
      }
    }

    // Check for keyword matches
    for (const [category, data] of Object.entries(ENHANCED_KNOWLEDGE_BASE)) {
      for (const keyword of data.keywords) {
        if (lowerMessage.includes(keyword)) {
          // Find the best response for this category
          const responses = Object.values(data.responses);
          const bestResponse = responses[0]; // For now, take the first response
          return {
            content: bestResponse.content,
            category: category,
            confidence: bestResponse.confidence * 0.8, // Lower confidence for keyword match
            suggestedActions: bestResponse.suggestedActions
          };
        }
      }
    }

    // Default response
    return {
      content: `T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. ƒê·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·ªët h∆°n, b·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ v·ªÅ:

‚Ä¢ **DCA Automation**: "DCA l√† g√¨?", "C√°ch t·∫°o k·∫ø ho·∫°ch DCA?"
‚Ä¢ **Trading**: "C√°ch s·ª≠ d·ª•ng trading panel?", "Giao d·ªãch PGAUx"
‚Ä¢ **Ph√≠**: "Ph√≠ giao d·ªãch bao nhi√™u?", "Chi ph√≠ DCA"
‚Ä¢ **B·∫£o m·∫≠t**: "D·ª± √°n c√≥ an to√†n kh√¥ng?", "B·∫£o m·∫≠t smart contract"

Ho·∫∑c b·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt c√¢u h·ªèi t·ª´ danh s√°ch b√™n d∆∞·ªõi.`,
      category: 'general',
      confidence: 0.5,
      suggestedActions: ['H·ªèi v·ªÅ DCA', 'H·ªèi v·ªÅ Trading', 'H·ªèi v·ªÅ B·∫£o m·∫≠t']
    };
  }, []);

  const sendMessage = useCallback(async (message: string) => {
    if (!message.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: message.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);
    setError(null);

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

      const response = processUserMessage(message);
      
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: response.content,
        timestamp: new Date(),
        metadata: {
          category: response.category,
          confidence: response.confidence,
          suggestedActions: response.suggestedActions
        }
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (err) {
      setError('Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
      
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: 'Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.',
        timestamp: new Date(),
        metadata: {
          category: 'error',
          confidence: 0,
          suggestedActions: ['Th·ª≠ l·∫°i', 'Li√™n h·ªá support']
        }
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  }, [processUserMessage]);

  const clearChat = useCallback(() => {
    setMessages([
      {
        id: '1',
        type: 'bot',
        content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa PentaGold. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ d·ª± √°n, DCA automation, trading v√† nhi·ªÅu th·ª© kh√°c. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?',
        timestamp: new Date(),
        metadata: {
          category: 'greeting',
          confidence: 1.0,
          suggestedActions: ['H·ªèi v·ªÅ DCA', 'H·ªèi v·ªÅ Trading', 'H·ªèi v·ªÅ B·∫£o m·∫≠t']
        }
      }
    ]);
    setError(null);
  }, []);

  const getQuickQuestions = useCallback(() => {
    return QUICK_QUESTIONS;
  }, []);

  return {
    messages,
    isTyping,
    error,
    sendMessage,
    clearChat,
    getQuickQuestions
  };
}; 